package com.bcdata.shortlink.controller;

import com.bcdata.shortlink.entity.ShortLink;
import com.bcdata.shortlink.entity.ShortLinkRepository;
import com.bcdata.shortlink.utils.ShortUrlGenerator;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

/**
 * short link app.controller
 *
 * @author yuxuecheng
 * @version 1.0
 * @contact yuxuecheng@baicdata.com
 * @time 2018 May 18 13:30
 */
@RestController    // This means that this class is a RestController
public class ShortLinkController {

    private static final Logger logger = LoggerFactory.getLogger (ShortLinkController.class);

    @Autowired // This means to get the bean called shortLinkRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ShortLinkRepository shortLinkRepository;

    @GetMapping(path="/shortlink/add")    // Map ONLY GET Requests
    public @ResponseBody
    String addShortLink(@RequestParam(name = "url", required = true) String url, @RequestParam(name = "format", required = false, defaultValue = "json") String format) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        logger.info ("have short link add request");
        String domainName = "http://localhost:8080";
        ShortLink shortLinkObj = new ShortLink (url);
        String shortLink = ShortUrlGenerator.shortUrl (url);
        shortLinkObj.setUri (shortLink);
        shortLink = String.format ("%s/%s", domainName, shortLink);
        shortLinkObj.setShortLink (shortLink);
        ShortLink savedShortLink = shortLinkRepository.save (shortLinkObj);
        logger.info (savedShortLink.toString ());

        if (format.equals ("json")) {
            Map<String, String> results = new HashMap<> ();
            results.put ("err", "");
            results.put ("url", savedShortLink.getShortLink ());

            JSONObject jsonObject = new JSONObject (results);

            return jsonObject.toString ();
        } else {
            return savedShortLink.getShortLink ();
        }
    }

    @RequestMapping(value="/{uri}")
    void handleShortLink(HttpServletResponse response, @PathVariable("uri") String uri) throws IOException {
        logger.info ("uri is: " + uri);

        ShortLink savedShortLink = shortLinkRepository.findByUri (uri);
        if (savedShortLink != null) {
            logger.info ("before saved short link: " + savedShortLink);
            savedShortLink.incrementCount ();
            logger.info ("after saved short link: " + savedShortLink);
            shortLinkRepository.saveAndFlush (savedShortLink);
            logger.info ("Get full link " + savedShortLink.getFullLink ());
            response.sendRedirect (savedShortLink.getFullLink ());
        } else {
            logger.warn ("There is no full link for: " + uri);
            response.sendError (400);
        }
    }
}
